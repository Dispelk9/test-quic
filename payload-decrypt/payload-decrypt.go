package main

import (
	// "bytes"
	// "crypto/aes"
	// "crypto/cipher"
	"crypto/rand"
	"crypto/rsa"
	"crypto/sha1"

	// "encoding/binary"

	// "crypto/sha256"
	"crypto/x509"
	// "encoding/base64"
	"encoding/hex"
	"encoding/pem"
	"flag"

	// "fmt"
	// "io"
	"io/ioutil"
	"log"

	// "github.com/lucas-clemente/aes12"
	"github.com/lucas-clemente/quic-go/internal/crypto"
	"github.com/lucas-clemente/quic-go/internal/protocol"
)

// Command-line flags
var (
	keyFile = flag.String("key", "../traffic-gen/id_rsa_trafficgen", "Path to RSA private key")
	inFile  = flag.String("in", "packets.log", "Path to input file")
	outFile = flag.String("out", "out.txt", "Path to output file")
	label   = flag.String("label", "", "Label to use (filename by default)")
	decrypt = flag.Bool("decrypt", true, "Decrypt instead of encrypting")
)

// func main() {
// 	// Load your secret key from a safe place and reuse it across multiple
// 	// Seal/Open calls. (Obviously don't use this example key for anything
// 	// real.) If you want to convert a passphrase to a key, use a suitable
// 	// package like bcrypt or scrypt.
// 	// When decoded the key should be 16 bytes (AES-128) or 32 (AES-256).
// 	// key, _ := hex.DecodeString("482bd603b54ae91647446b74b9dd12ff")
// 	otherkey, _ := hex.DecodeString("482bd603b54ae91647446b74b9dd12ff")
// 	otherIV, _ := hex.DecodeString("94d32954")
// 	ciphertext, _ := hex.DecodeString("a493774a5aa32a0b46922894ed9489dc1aee20f41650e300617f324450b6982c6634023b01758853a236b4d59a40b844536530002c7f14d91845eeac0660cb6e3864286ae109a6d182549d0d1fdfb80b06a6f048c04b327b10b2209a9e8086dd77f0f7ddcbe7b3636b14986f8c3183710e22090efd49bdbce6d616e5a85e0e4c436c92ed4f88aec105b86a0f3578f2d4e3dc05c22fab34a08f78a896fb970e7fc52987948fd868f34e9ecaa99af37aa42fab4113d016aa5917192418856e6f99e03959e86c8b764ed22643e0ec5faf06d3d2ecf53da048155724fc93856fb0d9ded4c326e057ff23c1c17a9810b7f66b68cb8ce6d9d7a2604f3e4360666fed4472f92e263e5daa2d4c5fc75ea7daff73560c2742a8b47f4fc967a10fcfc97341ea93113073cae3f93f5c97ea6d9f0434cd4fd77459700dc389df4235f34e3d0004d4e5d3ffac7d544523a63e8f4fb7617b4df50652f40f0852db4eec7e74fb9d2c13816cf96a0bf3bdd600308445b8283b7b657de345fde8b6cde6e46f9810c9c68b682b291ee22ae25ae8e20480c961db129a6d854260e159506de82d18d3310a303922cc620977d0e3d18dd03d9715c9e00bbb611d8780f175763c645cca4403d8f2cb883de309accc8deb211524861d7630a7fc20e5cf87842f9d3cbf0d004506958cadcda3ca12a1fdfc09d723d5a4194a515e0d0bc184c9a418262a1f62d1fb7aa702b6c6a4865c27b2e1a1827249d6381a00547835418e8ee5f59886f0a91c4c65f11886e0512a0b48b84b0459579ae28d00e944fbde9afd89f59f16b7d03e7cd6c32d79c103dd48a9d817f8f36cc2450ada2fca626df522f9bba9c919a4caf4173711309004674f793e9bb7275380170d001ac343e1c02384130c30bd14593e4444f3d9800cf9ecaa4568db7bd83f3ecda0c6d2151ce355701aea51be26d31384ea759842ada41b4cf1b25e40dc5a23614f649394dba53e1df8f97d38689358d1b2864b184dffabaaeb957850695e2063b94c86b6e9cd74d89af6d7b15933982e2ba8a35dcb1a98d92f1a3d05b27aa256aca86588150d6631fff0705898a1012ed6705b850b9e363dfd1252052ed57531acfb0bc15ffd34f54521ed9c399a48477339ffee0a680f37fefca2575999655cc25a8ef4adad857b8c2bdb77cc2ade36f111645a6a478f3bffc48040343d2ebbe1dac19ea271d504db29951767001f23c425e1b4b0c09153f94ce15ff741b0a62da136ed55ee96fd0eaafdc4632117632579fcae27a4ed50b96e2d70e42ab39da960fd788b187640b36790181b1bc1a4af95ce8a17d2fd0fc4e0b85131084510a6c357f69c3a4cc24240dc2738fe7fd454e6a78cc99855a8c02c23aca825e137fa144712eac92394db504ec9572336805217fe6d0db75689f71f34e00153cf75c1363a7a4b9f7440")
// 	// nonce, _ := hex.DecodeString("5d5e99068e073b3df97a6bd3de3301c176ce810737f4bfa2c2f2a2e77c01597810ad5dd5422b988492a4ab3c18603236cc469d59591d728b7ce2d18ed79b1a7e")

// 	decypher, _ := aes12.NewCipher(otherkey)
// 	// block, err := aes.NewCipher(key)
// 	// if err != nil {
// 	// 	panic(err.Error())
// 	// }

// 	nonce := make([]byte, 12)
// 	copy(nonce[0:4], otherIV)
// 	binary.LittleEndian.PutUint64(nonce[4:12], uint64(7))

// 	aesgcm, err := cipher.NewGCM(decypher)
// 	if err != nil {
// 		panic(err.Error())
// 	}

// 	plaintext, err := aesgcm.Open(nil, nonce, ciphertext, nil)
// 	if err != nil {
// 		panic(err.Error())
// 	}

// 	log.Printf("%s\n", plaintext)
// }

func main() {
	flag.Parse()
	otherKey, _ := hex.DecodeString("8aadf8af2be5474ee8f631315965155d")
	myKey, _ := hex.DecodeString("cf4383cb076d344fc47b30b570f8a595")
	otherIV, _ := hex.DecodeString("894d8258")
	myIV, _ := hex.DecodeString("d2abbd26")
	data, _ := hex.DecodeString("a424afebaba58588fe935af9fd8aa273f0a2ad223ab2813e2b82879a9dad1c2cf276c966950981b975d23de26dfd3f84dc9d9cc9c7c3364aa17bee60447ce80841649859c1171f2009f44f55800319f72cce4f342b450aa047433250c2f81469b77a76c5ee4bc105328bc17c9628043406bf3c71dff580a3f43c4b98373adbba979634cdef18119b55fe8a4247fb62d49faa6830402aa6994d8448dab21f7e54adf0140325f1fd2d41c653da30a9cbbdf68f33c0a0bc8870d2054f461bdb5ab64e49771602bc89c58871da1ecd1ba4c00067f27ac2e8805dfb1097d89b6be4af08083f5ad2fdb9a36163557bec95888d637bd5d38dbedf35783c6c2bc76acd5561faa5d5504e010c4db77966b2893bb3a6140f3c1b69ed2648bb8e41a01a866c682507ce5c4d56f2e0095b9329d5bdeab777f3b512e5087e29ff1f0f1f052d964bbe7867530c36124e3beba71305d845d62b0c6e46a318e717402c8947b3b9511bca4b3e2bb7121ea92a97e7d5d5285eec75ce2e34e9e5f86e42cd3314d2f2cbebabf1a29e5cd14e2ca77fc15cf9aae6f2239187e7e4afd96ca0f8e56c87161a72f49a3d0f0ecc80412a69683839ecf4439e2fd3db671d33ea054457b368bdb18d5091da804587c58275c58db5e567927aa29b70747e0e641537e0a0e2360a0dbddb6cd9e7aea5e33723001180598ffe5d4151ffd35311355c8aae5311b578f5631992e8657e9951751779bcfc17b3504bded5ba85dc892def460b9c6872b730b4c56dfe3bcc0a9d166d2a1fba09a548ba44fbb74443676cf3a6ac26241d60450e678bb6e7bca7a1c3fbfe51442908802f17452b7b559c1743303c05c7d549c289691f914b52799e34718f2b02bd6298d6410e44c929b232a8989b0a981e8f9db16b28cb90ccc18a9b5cac613e4e759df220abf194c1c04a19b6ffe8684d1cd74892d3a810d18e7daa4760186e1b8c6e734fd7402045176a727fedb794773b478beb53200a1fbe6a97eee68930abce758583dba90343f559d85406ead59b21e9e8d2c4012700949c7c906f071a08695b71723b0130031e7da0b95ccb850b01e7160bbee19b7352657d761f8b549bfb28eaf816fd93de0c541a2edef2078057035ea8c8b345723a02da184cee6781eae6d7ac811f392a27dac27b97fd1c36152bf48159024e19aefbd3f64a60c1f9f3264f2ac29dca68e0bfb21e9f9a2c0b20aaa7a5b63b84b76ee3f037237fc6c4a8e3276fefc11bb0db3ffa455f28d38b630b223f3da6cc3b50c1e2e27499bf859715984af2a9866220973109c1e97edb8cf324c1cbc50b8420e1e0154f793768a12b8f8d8c8b47815aa04fc84dc9584bd99405def74a9b5163bb76ef569d522b5973fee052770f04feeee5e0cf2d32f58e992a62018ed1c6165c6d3e11df290c761807677173627f74d0c78fbb03")
	accosData, _ := hex.DecodeString("582ccad8b69eb39607000007")
	// plaindata, _ := hex.DecodeString("12fffffffff")

	aead, _ := crypto.NewAEADAESGCM12(otherKey, myKey, otherIV, myIV)
	// log.Printf("\n %s", aead)
	buf := make([]byte, 0, protocol.MaxReceivePacketSize)

	decrypted, error := aead.Open(buf, data, 7, accosData)
	// decrypted := aead.Seal(buf, plaindata, 7, nil)
	log.Printf("%x", decrypted)
	log.Println(error)
}

func mainRSA() {
	flag.Parse()

	// Read the private key
	pemData, err := ioutil.ReadFile(*keyFile)
	if err != nil {
		log.Fatalf("read key file: %s", err)
	}

	// Read the input file
	in, err := ioutil.ReadFile(*inFile)

	if err != nil {
		log.Fatalf("input file: %s", err)
	}

	// Extract the PEM-encoded data block
	block, _ := pem.Decode(pemData)
	if block == nil {
		log.Fatalf("bad key data: %s", "not PEM-encoded")
	}
	if got, want := block.Type, "RSA PRIVATE KEY"; got != want {
		log.Fatalf("unknown key type %q, want %q", got, want)
	}

	// Decode the RSA private key
	priv, err := x509.ParsePKCS1PrivateKey(block.Bytes)
	if err != nil {
		log.Fatalf("bad private key: %s", err)
	}

	var out []byte
	if *decrypt {
		if *label == "" {
			*label = *outFile
		}
		test, _ := hex.DecodeString("d0aa64741dff9acf8bad8974f6e7f2fc8a6aaed3601cc028e7f45edc599fff8ae6697fad8a758f5430225cc5e52c6c21dd2ce2d71fbd69311ec3d0c59bdcb9cc48ce9ed3ff10b6ad8d91df2a10682049ab331b299ae1c1c499a8964370754a8177c418731dbba11c5009c3f696c43f7868933b56ce0ffb2c6acc65bd1817909374800d45a6828b36448c205d71b0cd19078598323a7553f8b71639017ee70c28f7be8a90fb85b964f6aacc3677764e1ab714131c20927bd338199e97c7e57e85e92bee877ee2122bf6fb195b178ef00988e32a85cfb006eebc4ea6e939215f0caaee9648ca18d31d450b4f0115a50492f61f04524946801c7aef48937167c731c204555f5363dac7ae7ed3ae70646708bb939e0cc2965f2a38dd6b846992c54b04147352f92287d91df939f99b1de4f56101aaec8f135ec2e7f92bf08638a9025ceff40e969819e9e0eb19fd68067691d7844c6f0d198726020f012d9e29298194a496da4625cc6759e1b40149178c2f10ad67cfc08cfb0d168f5b274e3f3fd9536f392c6b18f792a1771f2fa08aa4ddf140f4d353b3fd43d069a485bba7d84bbe6c59e4eec085b9936713943b23c79193628be6ee9defc64030629c10a4a6698b1d1a91f5b54384d91b27347e94326ef267b50c599edb2f97edd5958142699d42c7d58a1caa22f232a2fe43a6de80b012dcf7d99e407a2b207bf777b3dc3c6fa865b29c2f5f4236aa118a4c802c709e8acf093935c2aee07c49e9a31246baba15ca358b91fa3aa97ce946c3e454b6dce77d553dc2e8b92fb2bd0e5b1bcdfe58c62bc3557efbb42d61279b3280dfb807386d48146b5f11121defddbcace2c21f1de88785f950be856bb37e0d49ee0f2b78fd4a4ca3a4a5118f30b012facb2b72327a473d729101553e8c42c87d7e8b58d22137eebe8fd3e6f450729117674a7c540a0d514d25a9575f92a432e4b675600d80a6cb3cffdf7be81bb62dff04e30ff3fc803d4a7690b357a6e229ee7ad932fe322075775d5e7ad4efcf39e6b4ce869190a5c6c594719e395c4f0756b3e59c3237cdcc3db788d33fd644fad02ef5f865031dbe39eeff3f19ea40654afd2b6d402d7f423be5876b674d2243263141d25388d804b724698938c8da38f0762623b864a27f49f12690dc2749fcf5c3cbb2e9643ac992b437be56affa8061164d93a273a5ac047e70063b2335e824ffea7e573ab750c0f3e068baf2f4a5d0d420b27e0d3b6064fc32f46b3eba87c5930071063fc2ff17c22715a958ed6f3dda3ab31aa46fb1c5844d7ca476a6e111fd624a82d05eedcc918c48a0a274db3f2fc4a7600fef623914407a22518cb9081705175f95a997653f1dbceef2bd0e0537949d78ade48aeb3116411aefac1616d542542e170c358c028753687ed2d2d2a1949e4ded1d034a579c1d59b3fa41")
		// Decrypt the data
		rsa.DecryptOAEP(sha1.New(), rand.Reader, priv, in, []byte(*label))
		out, err = rsa.DecryptPKCS1v15(rand.Reader, priv, test)

		// out, err = rsa.DecryptOAEP(sha1.New(), rand.Reader, priv, test, []byte(*label))
		if err != nil {
			log.Fatalf("decrypt: %s", err)
		}
	} else {
		if *label == "" {
			*label = *inFile
		}
		test, _ := hex.DecodeString("80002d6a0101017fffffff")

		out, err = rsa.EncryptOAEP(sha1.New(), rand.Reader, &priv.PublicKey, test, []byte(*label))
		if err != nil {
			log.Fatalf("encrypt: %s", err)
		}
	}
	log.Printf("%x", out)
	// Write data to output file
	if err := ioutil.WriteFile(*outFile, out, 0600); err != nil {
		log.Fatalf("write output: %s", err)
	}
}
